import cv2
import numpy as np
from matplotlib import pyplot as plt

# Read the image
image = cv2.imread('index.jpeg')

# Convert to RGB (for display purposes)
image_mat = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Convert to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Sobel filters for edge detection
sobel_x = np.array([[-1, 0, 1],
                    [-2, 0, 2],
                    [-1, 0, 1]])
sobel_y = np.array([[-1, -2, -1],
                    [ 0, 0, 0],
                    [ 1, 2, 1]])

# Apply Sobel filters
edges_x = cv2.filter2D(gray_image, -1, sobel_x)
edges_y = cv2.filter2D(gray_image, -1, sobel_y)

# Combine the edges
edges = cv2.addWeighted(edges_x, 0.5, edges_y, 0.5, 0)

# Calculate the gradient in x and y direction
sobelx = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=5)
sobely = cv2.Sobel(gray_image, cv2.CV_64F, 0, 1, ksize=5)

# Texture extraction (sum of gradients)
texture = sobelx + sobely

# Titles and images for display
l_title = ["Original", "Edge Detection", "Texture Extraction"]
l_var = [image_mat, edges, texture]

# Plotting
fig, axs = plt.subplots(1, 3, figsize=(15, 5))
for i in range(3):
    axs[i].imshow(l_var[i], cmap='gray' if i != 0 else None)
    axs[i].set_title(l_title[i])
    axs[i].axis('off')

plt.show()
